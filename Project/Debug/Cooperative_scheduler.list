
Cooperative_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a48  08002a48  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002a48  08002a48  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a48  08002a48  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000054  08002aa4  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08002aa4  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009407  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf5  00000000  00000000  00029484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bfe  00000000  00000000  0002c430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7ff  00000000  00000000  0004302e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008254a  00000000  00000000  0004e82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0d77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d8  00000000  00000000  000d0dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a0c 	.word	0x08002a0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002a0c 	.word	0x08002a0c

0800014c <isButtonPressed>:

int TimeOutForKeyPress[NUM_BUTTON] = {100, 100, 100};
int button_long_pressed[10];
int button_flag[10];

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <getKeyInput>:
void subKeyProcess(){
	//TODO
//	button1_flag = 1;
}

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; ++i) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e090      	b.n	80002ae <getKeyInput+0x12e>
		KeyReg0[i] = KeyReg1[i];
 800018c:	4a4c      	ldr	r2, [pc, #304]	; (80002c0 <getKeyInput+0x140>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	494b      	ldr	r1, [pc, #300]	; (80002c4 <getKeyInput+0x144>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 800019c:	4a4a      	ldr	r2, [pc, #296]	; (80002c8 <getKeyInput+0x148>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4946      	ldr	r1, [pc, #280]	; (80002c0 <getKeyInput+0x140>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b02      	cmp	r3, #2
 80001b0:	d01b      	beq.n	80001ea <getKeyInput+0x6a>
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	2b02      	cmp	r3, #2
 80001b6:	dc21      	bgt.n	80001fc <getKeyInput+0x7c>
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d003      	beq.n	80001c6 <getKeyInput+0x46>
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d009      	beq.n	80001d8 <getKeyInput+0x58>
 80001c4:	e01a      	b.n	80001fc <getKeyInput+0x7c>
		case 0:
			KeyReg2[0] = HAL_GPIO_ReadPin(MODULE_GPIO_Port, MODULE_Pin);
 80001c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ca:	4840      	ldr	r0, [pc, #256]	; (80002cc <getKeyInput+0x14c>)
 80001cc:	f001 fbf2 	bl	80019b4 <HAL_GPIO_ReadPin>
 80001d0:	4603      	mov	r3, r0
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b3c      	ldr	r3, [pc, #240]	; (80002c8 <getKeyInput+0x148>)
 80001d6:	601a      	str	r2, [r3, #0]
		case 1:
			KeyReg2[1] = HAL_GPIO_ReadPin(TIME_GPIO_Port, TIME_Pin);
 80001d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001dc:	483c      	ldr	r0, [pc, #240]	; (80002d0 <getKeyInput+0x150>)
 80001de:	f001 fbe9 	bl	80019b4 <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	461a      	mov	r2, r3
 80001e6:	4b38      	ldr	r3, [pc, #224]	; (80002c8 <getKeyInput+0x148>)
 80001e8:	605a      	str	r2, [r3, #4]
		case 2:
			KeyReg2[2] = HAL_GPIO_ReadPin(VALUE_GPIO_Port, VALUE_Pin);
 80001ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ee:	4838      	ldr	r0, [pc, #224]	; (80002d0 <getKeyInput+0x150>)
 80001f0:	f001 fbe0 	bl	80019b4 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b33      	ldr	r3, [pc, #204]	; (80002c8 <getKeyInput+0x148>)
 80001fa:	609a      	str	r2, [r3, #8]
		}

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 80001fc:	4a31      	ldr	r2, [pc, #196]	; (80002c4 <getKeyInput+0x144>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000204:	492e      	ldr	r1, [pc, #184]	; (80002c0 <getKeyInput+0x140>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020c:	429a      	cmp	r2, r3
 800020e:	d14b      	bne.n	80002a8 <getKeyInput+0x128>
 8000210:	4a2b      	ldr	r2, [pc, #172]	; (80002c0 <getKeyInput+0x140>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	492b      	ldr	r1, [pc, #172]	; (80002c8 <getKeyInput+0x148>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000220:	429a      	cmp	r2, r3
 8000222:	d141      	bne.n	80002a8 <getKeyInput+0x128>
			if (KeyReg3[i] != KeyReg2[i]) {
 8000224:	4a2b      	ldr	r2, [pc, #172]	; (80002d4 <getKeyInput+0x154>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	4926      	ldr	r1, [pc, #152]	; (80002c8 <getKeyInput+0x148>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d018      	beq.n	800026a <getKeyInput+0xea>
				KeyReg3[i] = KeyReg2[i];
 8000238:	4a23      	ldr	r2, [pc, #140]	; (80002c8 <getKeyInput+0x148>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	4924      	ldr	r1, [pc, #144]	; (80002d4 <getKeyInput+0x154>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 8000248:	4a1f      	ldr	r2, [pc, #124]	; (80002c8 <getKeyInput+0x148>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d129      	bne.n	80002a8 <getKeyInput+0x128>
					TimeOutForKeyPress[i] = 100;
 8000254:	4a20      	ldr	r2, [pc, #128]	; (80002d8 <getKeyInput+0x158>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2164      	movs	r1, #100	; 0x64
 800025a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_flag[i] = 1;
 800025e:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <getKeyInput+0x15c>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2101      	movs	r1, #1
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000268:	e01e      	b.n	80002a8 <getKeyInput+0x128>
				}
			}
			else {
				--TimeOutForKeyPress[i];
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <getKeyInput+0x158>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	1e5a      	subs	r2, r3, #1
 8000274:	4918      	ldr	r1, [pc, #96]	; (80002d8 <getKeyInput+0x158>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0) {
 800027c:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <getKeyInput+0x158>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10f      	bne.n	80002a8 <getKeyInput+0x128>
					if (KeyReg2[i] == PRESSED_STATE) {
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <getKeyInput+0x148>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d104      	bne.n	800029e <getKeyInput+0x11e>
						button_flag[i] = 1;
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <getKeyInput+0x15c>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2101      	movs	r1, #1
 800029a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					TimeOutForKeyPress[i] = 25;
 800029e:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <getKeyInput+0x158>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2119      	movs	r1, #25
 80002a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUTTON; ++i) {
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	3301      	adds	r3, #1
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	f77f af6b 	ble.w	800018c <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000000c 	.word	0x2000000c
 80002c4:	20000000 	.word	0x20000000
 80002c8:	20000018 	.word	0x20000018
 80002cc:	40011000 	.word	0x40011000
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	20000024 	.word	0x20000024
 80002d8:	20000030 	.word	0x20000030
 80002dc:	20000090 	.word	0x20000090

080002e0 <display7SEG>:
#include "display7SEG.h"

int index_led = 0;
int led_buffer[4];

void display7SEG(int num) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2b09      	cmp	r3, #9
 80002ec:	d87f      	bhi.n	80003ee <display7SEG+0x10e>
 80002ee:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <display7SEG+0x14>)
 80002f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f4:	0800031d 	.word	0x0800031d
 80002f8:	08000333 	.word	0x08000333
 80002fc:	08000349 	.word	0x08000349
 8000300:	0800035f 	.word	0x0800035f
 8000304:	08000375 	.word	0x08000375
 8000308:	0800038b 	.word	0x0800038b
 800030c:	080003a1 	.word	0x080003a1
 8000310:	080003b7 	.word	0x080003b7
 8000314:	080003cd 	.word	0x080003cd
 8000318:	080003d9 	.word	0x080003d9
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	213f      	movs	r1, #63	; 0x3f
 8000320:	4835      	ldr	r0, [pc, #212]	; (80003f8 <display7SEG+0x118>)
 8000322:	f001 fb5e 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, g_Pin, 1);
 8000326:	2201      	movs	r2, #1
 8000328:	2140      	movs	r1, #64	; 0x40
 800032a:	4833      	ldr	r0, [pc, #204]	; (80003f8 <display7SEG+0x118>)
 800032c:	f001 fb59 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 8000330:	e05d      	b.n	80003ee <display7SEG+0x10e>
	case 1:
		HAL_GPIO_WritePin(GPIOB, b_Pin | c_Pin, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	2106      	movs	r1, #6
 8000336:	4830      	ldr	r0, [pc, #192]	; (80003f8 <display7SEG+0x118>)
 8000338:	f001 fb53 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a_Pin | d_Pin | e_Pin | f_Pin | g_Pin, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	2179      	movs	r1, #121	; 0x79
 8000340:	482d      	ldr	r0, [pc, #180]	; (80003f8 <display7SEG+0x118>)
 8000342:	f001 fb4e 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 8000346:	e052      	b.n	80003ee <display7SEG+0x10e>
	case 2:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | d_Pin | e_Pin | g_Pin, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	215b      	movs	r1, #91	; 0x5b
 800034c:	482a      	ldr	r0, [pc, #168]	; (80003f8 <display7SEG+0x118>)
 800034e:	f001 fb48 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, c_Pin | f_Pin, 1);
 8000352:	2201      	movs	r2, #1
 8000354:	2124      	movs	r1, #36	; 0x24
 8000356:	4828      	ldr	r0, [pc, #160]	; (80003f8 <display7SEG+0x118>)
 8000358:	f001 fb43 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 800035c:	e047      	b.n	80003ee <display7SEG+0x10e>
	case 3:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | g_Pin, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	214f      	movs	r1, #79	; 0x4f
 8000362:	4825      	ldr	r0, [pc, #148]	; (80003f8 <display7SEG+0x118>)
 8000364:	f001 fb3d 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e_Pin | f_Pin, 1);
 8000368:	2201      	movs	r2, #1
 800036a:	2130      	movs	r1, #48	; 0x30
 800036c:	4822      	ldr	r0, [pc, #136]	; (80003f8 <display7SEG+0x118>)
 800036e:	f001 fb38 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 8000372:	e03c      	b.n	80003ee <display7SEG+0x10e>
	case 4:
		HAL_GPIO_WritePin(GPIOB, b_Pin | c_Pin | f_Pin | g_Pin, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	2166      	movs	r1, #102	; 0x66
 8000378:	481f      	ldr	r0, [pc, #124]	; (80003f8 <display7SEG+0x118>)
 800037a:	f001 fb32 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a_Pin | d_Pin | e_Pin, 1);
 800037e:	2201      	movs	r2, #1
 8000380:	2119      	movs	r1, #25
 8000382:	481d      	ldr	r0, [pc, #116]	; (80003f8 <display7SEG+0x118>)
 8000384:	f001 fb2d 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 8000388:	e031      	b.n	80003ee <display7SEG+0x10e>
	case 5:
		HAL_GPIO_WritePin(GPIOB, a_Pin | c_Pin | d_Pin | f_Pin | g_Pin, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	216d      	movs	r1, #109	; 0x6d
 800038e:	481a      	ldr	r0, [pc, #104]	; (80003f8 <display7SEG+0x118>)
 8000390:	f001 fb27 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b_Pin | e_Pin, 1);
 8000394:	2201      	movs	r2, #1
 8000396:	2112      	movs	r1, #18
 8000398:	4817      	ldr	r0, [pc, #92]	; (80003f8 <display7SEG+0x118>)
 800039a:	f001 fb22 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 800039e:	e026      	b.n	80003ee <display7SEG+0x10e>
	case 6:
		HAL_GPIO_WritePin(GPIOB, a_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	217d      	movs	r1, #125	; 0x7d
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <display7SEG+0x118>)
 80003a6:	f001 fb1c 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b_Pin, 1);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2102      	movs	r1, #2
 80003ae:	4812      	ldr	r0, [pc, #72]	; (80003f8 <display7SEG+0x118>)
 80003b0:	f001 fb17 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 80003b4:	e01b      	b.n	80003ee <display7SEG+0x10e>
	case 7:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2107      	movs	r1, #7
 80003ba:	480f      	ldr	r0, [pc, #60]	; (80003f8 <display7SEG+0x118>)
 80003bc:	f001 fb11 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, d_Pin | e_Pin | f_Pin | g_Pin, 1);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2178      	movs	r1, #120	; 0x78
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <display7SEG+0x118>)
 80003c6:	f001 fb0c 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 80003ca:	e010      	b.n	80003ee <display7SEG+0x10e>
	case 8:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | e_Pin | f_Pin | g_Pin, 0);
 80003cc:	2200      	movs	r2, #0
 80003ce:	217f      	movs	r1, #127	; 0x7f
 80003d0:	4809      	ldr	r0, [pc, #36]	; (80003f8 <display7SEG+0x118>)
 80003d2:	f001 fb06 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 80003d6:	e00a      	b.n	80003ee <display7SEG+0x10e>
	case 9:
		HAL_GPIO_WritePin(GPIOB, a_Pin | b_Pin | c_Pin | d_Pin | f_Pin | g_Pin, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	216f      	movs	r1, #111	; 0x6f
 80003dc:	4806      	ldr	r0, [pc, #24]	; (80003f8 <display7SEG+0x118>)
 80003de:	f001 fb00 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e_Pin, 1);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2110      	movs	r1, #16
 80003e6:	4804      	ldr	r0, [pc, #16]	; (80003f8 <display7SEG+0x118>)
 80003e8:	f001 fafb 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 80003ec:	bf00      	nop
	}
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010c00 	.word	0x40010c00

080003fc <display7SEG_2>:

void display7SEG_2(int num) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b09      	cmp	r3, #9
 8000408:	f200 8094 	bhi.w	8000534 <display7SEG_2+0x138>
 800040c:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <display7SEG_2+0x18>)
 800040e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000412:	bf00      	nop
 8000414:	0800043d 	.word	0x0800043d
 8000418:	08000457 	.word	0x08000457
 800041c:	08000471 	.word	0x08000471
 8000420:	0800048b 	.word	0x0800048b
 8000424:	080004a5 	.word	0x080004a5
 8000428:	080004bf 	.word	0x080004bf
 800042c:	080004d9 	.word	0x080004d9
 8000430:	080004f3 	.word	0x080004f3
 8000434:	0800050d 	.word	0x0800050d
 8000438:	0800051b 	.word	0x0800051b
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000442:	483e      	ldr	r0, [pc, #248]	; (800053c <display7SEG_2+0x140>)
 8000444:	f001 facd 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, g2_Pin, 1);
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800044e:	483b      	ldr	r0, [pc, #236]	; (800053c <display7SEG_2+0x140>)
 8000450:	f001 fac7 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 8000454:	e06e      	b.n	8000534 <display7SEG_2+0x138>
	case 1:
		HAL_GPIO_WritePin(GPIOB, b2_Pin | c2_Pin, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 7140 	mov.w	r1, #768	; 0x300
 800045c:	4837      	ldr	r0, [pc, #220]	; (800053c <display7SEG_2+0x140>)
 800045e:	f001 fac0 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin, 1);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 8000468:	4834      	ldr	r0, [pc, #208]	; (800053c <display7SEG_2+0x140>)
 800046a:	f001 faba 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 800046e:	e061      	b.n	8000534 <display7SEG_2+0x138>
	case 2:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | d2_Pin | e2_Pin | g2_Pin, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 8000476:	4831      	ldr	r0, [pc, #196]	; (800053c <display7SEG_2+0x140>)
 8000478:	f001 fab3 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, c2_Pin | f2_Pin, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000482:	482e      	ldr	r0, [pc, #184]	; (800053c <display7SEG_2+0x140>)
 8000484:	f001 faad 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 8000488:	e054      	b.n	8000534 <display7SEG_2+0x138>
	case 3:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | g2_Pin, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8000490:	482a      	ldr	r0, [pc, #168]	; (800053c <display7SEG_2+0x140>)
 8000492:	f001 faa6 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e2_Pin | f2_Pin, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800049c:	4827      	ldr	r0, [pc, #156]	; (800053c <display7SEG_2+0x140>)
 800049e:	f001 faa0 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 80004a2:	e047      	b.n	8000534 <display7SEG_2+0x138>
	case 4:
		HAL_GPIO_WritePin(GPIOB, b2_Pin | c2_Pin | f2_Pin | g2_Pin, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80004aa:	4824      	ldr	r0, [pc, #144]	; (800053c <display7SEG_2+0x140>)
 80004ac:	f001 fa99 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a2_Pin | d2_Pin | e2_Pin, 1);
 80004b0:	2201      	movs	r2, #1
 80004b2:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80004b6:	4821      	ldr	r0, [pc, #132]	; (800053c <display7SEG_2+0x140>)
 80004b8:	f001 fa93 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 80004bc:	e03a      	b.n	8000534 <display7SEG_2+0x138>
	case 5:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | c2_Pin | d2_Pin | f2_Pin | g2_Pin, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 80004c4:	481d      	ldr	r0, [pc, #116]	; (800053c <display7SEG_2+0x140>)
 80004c6:	f001 fa8c 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b2_Pin | e2_Pin, 1);
 80004ca:	2201      	movs	r2, #1
 80004cc:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80004d0:	481a      	ldr	r0, [pc, #104]	; (800053c <display7SEG_2+0x140>)
 80004d2:	f001 fa86 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 80004d6:	e02d      	b.n	8000534 <display7SEG_2+0x138>
	case 6:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80004de:	4817      	ldr	r0, [pc, #92]	; (800053c <display7SEG_2+0x140>)
 80004e0:	f001 fa7f 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b2_Pin, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ea:	4814      	ldr	r0, [pc, #80]	; (800053c <display7SEG_2+0x140>)
 80004ec:	f001 fa79 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 80004f0:	e020      	b.n	8000534 <display7SEG_2+0x138>
	case 7:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 7160 	mov.w	r1, #896	; 0x380
 80004f8:	4810      	ldr	r0, [pc, #64]	; (800053c <display7SEG_2+0x140>)
 80004fa:	f001 fa72 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, d2_Pin | e2_Pin | f2_Pin | g2_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <display7SEG_2+0x140>)
 8000506:	f001 fa6c 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 800050a:	e013      	b.n	8000534 <display7SEG_2+0x138>
	case 8:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | e2_Pin | f2_Pin | g2_Pin, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <display7SEG_2+0x140>)
 8000514:	f001 fa65 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 8000518:	e00c      	b.n	8000534 <display7SEG_2+0x138>
	case 9:
		HAL_GPIO_WritePin(GPIOB, a2_Pin | b2_Pin | c2_Pin | d2_Pin | f2_Pin | g2_Pin, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <display7SEG_2+0x140>)
 8000522:	f001 fa5e 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e2_Pin, 1);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <display7SEG_2+0x140>)
 800052e:	f001 fa58 	bl	80019e2 <HAL_GPIO_WritePin>
		break;
 8000532:	bf00      	nop
	}
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40010c00 	.word	0x40010c00

08000540 <update7SEG>:

void update7SEG(int index){
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    switch (index){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d003      	beq.n	8000556 <update7SEG+0x16>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d017      	beq.n	8000584 <update7SEG+0x44>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
			display7SEG(led_buffer[1]);
			display7SEG_2(led_buffer[3]);
            break;
        default:
            break;
 8000554:	e02d      	b.n	80005b2 <update7SEG+0x72>
            HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055c:	4817      	ldr	r0, [pc, #92]	; (80005bc <update7SEG+0x7c>)
 800055e:	f001 fa40 	bl	80019e2 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000568:	4814      	ldr	r0, [pc, #80]	; (80005bc <update7SEG+0x7c>)
 800056a:	f001 fa3a 	bl	80019e2 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[0]);
 800056e:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <update7SEG+0x80>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff feb4 	bl	80002e0 <display7SEG>
            display7SEG_2(led_buffer[2]);
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <update7SEG+0x80>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff3d 	bl	80003fc <display7SEG_2>
            break;
 8000582:	e016      	b.n	80005b2 <update7SEG+0x72>
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058a:	480c      	ldr	r0, [pc, #48]	; (80005bc <update7SEG+0x7c>)
 800058c:	f001 fa29 	bl	80019e2 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	4809      	ldr	r0, [pc, #36]	; (80005bc <update7SEG+0x7c>)
 8000598:	f001 fa23 	bl	80019e2 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <update7SEG+0x80>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe9d 	bl	80002e0 <display7SEG>
			display7SEG_2(led_buffer[3]);
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <update7SEG+0x80>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ff26 	bl	80003fc <display7SEG_2>
            break;
 80005b0:	bf00      	nop
    }
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40010800 	.word	0x40010800
 80005c0:	200000e0 	.word	0x200000e0

080005c4 <updateClockBuffer>:

void updateClockBuffer() {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
    led_buffer[0] = value / 1000;
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <updateClockBuffer+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a20      	ldr	r2, [pc, #128]	; (8000650 <updateClockBuffer+0x8c>)
 80005ce:	fb82 1203 	smull	r1, r2, r2, r3
 80005d2:	1192      	asrs	r2, r2, #6
 80005d4:	17db      	asrs	r3, r3, #31
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <updateClockBuffer+0x90>)
 80005da:	6013      	str	r3, [r2, #0]
    led_buffer[1] = (value / 100) % 10;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <updateClockBuffer+0x88>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <updateClockBuffer+0x94>)
 80005e2:	fb82 1203 	smull	r1, r2, r2, r3
 80005e6:	1152      	asrs	r2, r2, #5
 80005e8:	17db      	asrs	r3, r3, #31
 80005ea:	1ad1      	subs	r1, r2, r3
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <updateClockBuffer+0x98>)
 80005ee:	fb83 2301 	smull	r2, r3, r3, r1
 80005f2:	109a      	asrs	r2, r3, #2
 80005f4:	17cb      	asrs	r3, r1, #31
 80005f6:	1ad2      	subs	r2, r2, r3
 80005f8:	4613      	mov	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	1aca      	subs	r2, r1, r3
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <updateClockBuffer+0x90>)
 8000604:	605a      	str	r2, [r3, #4]
    led_buffer[2] = value1 / 1000;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <updateClockBuffer+0x9c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a11      	ldr	r2, [pc, #68]	; (8000650 <updateClockBuffer+0x8c>)
 800060c:	fb82 1203 	smull	r1, r2, r2, r3
 8000610:	1192      	asrs	r2, r2, #6
 8000612:	17db      	asrs	r3, r3, #31
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <updateClockBuffer+0x90>)
 8000618:	6093      	str	r3, [r2, #8]
    led_buffer[3] = (value1 / 100) % 10;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <updateClockBuffer+0x9c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <updateClockBuffer+0x94>)
 8000620:	fb82 1203 	smull	r1, r2, r2, r3
 8000624:	1152      	asrs	r2, r2, #5
 8000626:	17db      	asrs	r3, r3, #31
 8000628:	1ad1      	subs	r1, r2, r3
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <updateClockBuffer+0x98>)
 800062c:	fb83 2301 	smull	r2, r3, r3, r1
 8000630:	109a      	asrs	r2, r3, #2
 8000632:	17cb      	asrs	r3, r1, #31
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	4613      	mov	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	4413      	add	r3, r2
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	1aca      	subs	r2, r1, r3
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <updateClockBuffer+0x90>)
 8000642:	60da      	str	r2, [r3, #12]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000084 	.word	0x20000084
 8000650:	10624dd3 	.word	0x10624dd3
 8000654:	200000e0 	.word	0x200000e0
 8000658:	51eb851f 	.word	0x51eb851f
 800065c:	66666667 	.word	0x66666667
 8000660:	20000088 	.word	0x20000088

08000664 <clearAllClock>:

void clearAllClock() {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <clearAllClock+0x20>)
 8000670:	f001 f9b7 	bl	80019e2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <clearAllClock+0x24>)
 800067c:	f001 f9b1 	bl	80019e2 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40010800 	.word	0x40010800
 8000688:	40010c00 	.word	0x40010c00

0800068c <fsm_traffic_light_run>:

int TIME_RED_tmp = 0;
int TIME_AMBER_tmp = 0;
int TIME_GREEN_tmp = 0;

void fsm_traffic_light_run() {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch (status) {
 8000690:	4bae      	ldr	r3, [pc, #696]	; (800094c <fsm_traffic_light_run+0x2c0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3b01      	subs	r3, #1
 8000696:	2b07      	cmp	r3, #7
 8000698:	f200 8268 	bhi.w	8000b6c <fsm_traffic_light_run+0x4e0>
 800069c:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <fsm_traffic_light_run+0x18>)
 800069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a2:	bf00      	nop
 80006a4:	080006c5 	.word	0x080006c5
 80006a8:	080006d9 	.word	0x080006d9
 80006ac:	0800077f 	.word	0x0800077f
 80006b0:	08000813 	.word	0x08000813
 80006b4:	080008b9 	.word	0x080008b9
 80006b8:	08000971 	.word	0x08000971
 80006bc:	08000a0d 	.word	0x08000a0d
 80006c0:	08000aa9 	.word	0x08000aa9
	case INIT:
		status = RED_GREEN;
 80006c4:	4ba1      	ldr	r3, [pc, #644]	; (800094c <fsm_traffic_light_run+0x2c0>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	601a      	str	r2, [r3, #0]
		setTimer(0, TIME_GREEN);
 80006ca:	4ba1      	ldr	r3, [pc, #644]	; (8000950 <fsm_traffic_light_run+0x2c4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4619      	mov	r1, r3
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fd67 	bl	80011a4 <setTimer>
		break;
 80006d6:	e258      	b.n	8000b8a <fsm_traffic_light_run+0x4fe>
	case RED_GREEN:
		value = timer_counter[0] + TIME_YELLOW / 10;
 80006d8:	4b9e      	ldr	r3, [pc, #632]	; (8000954 <fsm_traffic_light_run+0x2c8>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b9e      	ldr	r3, [pc, #632]	; (8000958 <fsm_traffic_light_run+0x2cc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	499e      	ldr	r1, [pc, #632]	; (800095c <fsm_traffic_light_run+0x2d0>)
 80006e2:	fb81 0103 	smull	r0, r1, r1, r3
 80006e6:	1089      	asrs	r1, r1, #2
 80006e8:	17db      	asrs	r3, r3, #31
 80006ea:	1acb      	subs	r3, r1, r3
 80006ec:	4413      	add	r3, r2
 80006ee:	4a9c      	ldr	r2, [pc, #624]	; (8000960 <fsm_traffic_light_run+0x2d4>)
 80006f0:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 80006f2:	4b98      	ldr	r3, [pc, #608]	; (8000954 <fsm_traffic_light_run+0x2c8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a9b      	ldr	r2, [pc, #620]	; (8000964 <fsm_traffic_light_run+0x2d8>)
 80006f8:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_OP_Pin | LED_YELLOW_OP_Pin, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	21cc      	movs	r1, #204	; 0xcc
 80006fe:	489a      	ldr	r0, [pc, #616]	; (8000968 <fsm_traffic_light_run+0x2dc>)
 8000700:	f001 f96f 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_OP_Pin, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2130      	movs	r1, #48	; 0x30
 8000708:	4897      	ldr	r0, [pc, #604]	; (8000968 <fsm_traffic_light_run+0x2dc>)
 800070a:	f001 f96a 	bl	80019e2 <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 800070e:	2000      	movs	r0, #0
 8000710:	f000 fd68 	bl	80011e4 <isTimerExpired>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d108      	bne.n	800072c <fsm_traffic_light_run+0xa0>
			status = RED_YELLOW;
 800071a:	4b8c      	ldr	r3, [pc, #560]	; (800094c <fsm_traffic_light_run+0x2c0>)
 800071c:	2203      	movs	r2, #3
 800071e:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_YELLOW);
 8000720:	4b8d      	ldr	r3, [pc, #564]	; (8000958 <fsm_traffic_light_run+0x2cc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	2000      	movs	r0, #0
 8000728:	f000 fd3c 	bl	80011a4 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff fd0d 	bl	800014c <isButtonPressed>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	d117      	bne.n	8000768 <fsm_traffic_light_run+0xdc>
			status = MOD_RED;
 8000738:	4b84      	ldr	r3, [pc, #528]	; (800094c <fsm_traffic_light_run+0x2c0>)
 800073a:	2206      	movs	r2, #6
 800073c:	601a      	str	r2, [r3, #0]
			clearAllClock();
 800073e:	f7ff ff91 	bl	8000664 <clearAllClock>
			value = TIME_RED / 10;
 8000742:	4b8a      	ldr	r3, [pc, #552]	; (800096c <fsm_traffic_light_run+0x2e0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a85      	ldr	r2, [pc, #532]	; (800095c <fsm_traffic_light_run+0x2d0>)
 8000748:	fb82 1203 	smull	r1, r2, r2, r3
 800074c:	1092      	asrs	r2, r2, #2
 800074e:	17db      	asrs	r3, r3, #31
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	4a83      	ldr	r2, [pc, #524]	; (8000960 <fsm_traffic_light_run+0x2d4>)
 8000754:	6013      	str	r3, [r2, #0]
			value1 = 200;
 8000756:	4b83      	ldr	r3, [pc, #524]	; (8000964 <fsm_traffic_light_run+0x2d8>)
 8000758:	22c8      	movs	r2, #200	; 0xc8
 800075a:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 800075c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fd1f 	bl	80011a4 <setTimer>
		}
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
		break;
 8000766:	e203      	b.n	8000b70 <fsm_traffic_light_run+0x4e4>
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fcef 	bl	800014c <isButtonPressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	f000 81fd 	beq.w	8000b70 <fsm_traffic_light_run+0x4e4>
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff fce8 	bl	800014c <isButtonPressed>
		break;
 800077c:	e1f8      	b.n	8000b70 <fsm_traffic_light_run+0x4e4>
	case RED_YELLOW:
		value = timer_counter[0];
 800077e:	4b75      	ldr	r3, [pc, #468]	; (8000954 <fsm_traffic_light_run+0x2c8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a77      	ldr	r2, [pc, #476]	; (8000960 <fsm_traffic_light_run+0x2d4>)
 8000784:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 8000786:	4b73      	ldr	r3, [pc, #460]	; (8000954 <fsm_traffic_light_run+0x2c8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a76      	ldr	r2, [pc, #472]	; (8000964 <fsm_traffic_light_run+0x2d8>)
 800078c:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_GREEN_Pin | LED_RED_OP_Pin | LED_GREEN_OP_Pin, 1);
 800078e:	2201      	movs	r2, #1
 8000790:	21d4      	movs	r1, #212	; 0xd4
 8000792:	4875      	ldr	r0, [pc, #468]	; (8000968 <fsm_traffic_light_run+0x2dc>)
 8000794:	f001 f925 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_YELLOW_OP_Pin, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2128      	movs	r1, #40	; 0x28
 800079c:	4872      	ldr	r0, [pc, #456]	; (8000968 <fsm_traffic_light_run+0x2dc>)
 800079e:	f001 f920 	bl	80019e2 <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 fd1e 	bl	80011e4 <isTimerExpired>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d108      	bne.n	80007c0 <fsm_traffic_light_run+0x134>
			status = GREEN_RED;
 80007ae:	4b67      	ldr	r3, [pc, #412]	; (800094c <fsm_traffic_light_run+0x2c0>)
 80007b0:	2204      	movs	r2, #4
 80007b2:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 80007b4:	4b66      	ldr	r3, [pc, #408]	; (8000950 <fsm_traffic_light_run+0x2c4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 fcf2 	bl	80011a4 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff fcc3 	bl	800014c <isButtonPressed>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d117      	bne.n	80007fc <fsm_traffic_light_run+0x170>
			status = MOD_RED;
 80007cc:	4b5f      	ldr	r3, [pc, #380]	; (800094c <fsm_traffic_light_run+0x2c0>)
 80007ce:	2206      	movs	r2, #6
 80007d0:	601a      	str	r2, [r3, #0]
			clearAllClock();
 80007d2:	f7ff ff47 	bl	8000664 <clearAllClock>
			value = TIME_RED / 10;
 80007d6:	4b65      	ldr	r3, [pc, #404]	; (800096c <fsm_traffic_light_run+0x2e0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a60      	ldr	r2, [pc, #384]	; (800095c <fsm_traffic_light_run+0x2d0>)
 80007dc:	fb82 1203 	smull	r1, r2, r2, r3
 80007e0:	1092      	asrs	r2, r2, #2
 80007e2:	17db      	asrs	r3, r3, #31
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	4a5e      	ldr	r2, [pc, #376]	; (8000960 <fsm_traffic_light_run+0x2d4>)
 80007e8:	6013      	str	r3, [r2, #0]
			value1 = 200;
 80007ea:	4b5e      	ldr	r3, [pc, #376]	; (8000964 <fsm_traffic_light_run+0x2d8>)
 80007ec:	22c8      	movs	r2, #200	; 0xc8
 80007ee:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 80007f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fcd5 	bl	80011a4 <setTimer>
		}
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
		break;
 80007fa:	e1bb      	b.n	8000b74 <fsm_traffic_light_run+0x4e8>
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fca5 	bl	800014c <isButtonPressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	f000 81b5 	beq.w	8000b74 <fsm_traffic_light_run+0x4e8>
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff fc9e 	bl	800014c <isButtonPressed>
		break;
 8000810:	e1b0      	b.n	8000b74 <fsm_traffic_light_run+0x4e8>
	case GREEN_RED:
		value = timer_counter[0];
 8000812:	4b50      	ldr	r3, [pc, #320]	; (8000954 <fsm_traffic_light_run+0x2c8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a52      	ldr	r2, [pc, #328]	; (8000960 <fsm_traffic_light_run+0x2d4>)
 8000818:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0] + TIME_YELLOW / 10;
 800081a:	4b4e      	ldr	r3, [pc, #312]	; (8000954 <fsm_traffic_light_run+0x2c8>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b4e      	ldr	r3, [pc, #312]	; (8000958 <fsm_traffic_light_run+0x2cc>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	494e      	ldr	r1, [pc, #312]	; (800095c <fsm_traffic_light_run+0x2d0>)
 8000824:	fb81 0103 	smull	r0, r1, r1, r3
 8000828:	1089      	asrs	r1, r1, #2
 800082a:	17db      	asrs	r3, r3, #31
 800082c:	1acb      	subs	r3, r1, r3
 800082e:	4413      	add	r3, r2
 8000830:	4a4c      	ldr	r2, [pc, #304]	; (8000964 <fsm_traffic_light_run+0x2d8>)
 8000832:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_YELLOW_Pin | LED_YELLOW_OP_Pin | LED_GREEN_OP_Pin, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	2178      	movs	r1, #120	; 0x78
 8000838:	484b      	ldr	r0, [pc, #300]	; (8000968 <fsm_traffic_light_run+0x2dc>)
 800083a:	f001 f8d2 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin | LED_RED_OP_Pin, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2184      	movs	r1, #132	; 0x84
 8000842:	4849      	ldr	r0, [pc, #292]	; (8000968 <fsm_traffic_light_run+0x2dc>)
 8000844:	f001 f8cd 	bl	80019e2 <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 8000848:	2000      	movs	r0, #0
 800084a:	f000 fccb 	bl	80011e4 <isTimerExpired>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d108      	bne.n	8000866 <fsm_traffic_light_run+0x1da>
			status = YELLOW_RED;
 8000854:	4b3d      	ldr	r3, [pc, #244]	; (800094c <fsm_traffic_light_run+0x2c0>)
 8000856:	2205      	movs	r2, #5
 8000858:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_YELLOW);
 800085a:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <fsm_traffic_light_run+0x2cc>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fc9f 	bl	80011a4 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fc70 	bl	800014c <isButtonPressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d117      	bne.n	80008a2 <fsm_traffic_light_run+0x216>
			value = TIME_RED / 10;
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <fsm_traffic_light_run+0x2e0>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a39      	ldr	r2, [pc, #228]	; (800095c <fsm_traffic_light_run+0x2d0>)
 8000878:	fb82 1203 	smull	r1, r2, r2, r3
 800087c:	1092      	asrs	r2, r2, #2
 800087e:	17db      	asrs	r3, r3, #31
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	4a37      	ldr	r2, [pc, #220]	; (8000960 <fsm_traffic_light_run+0x2d4>)
 8000884:	6013      	str	r3, [r2, #0]
			value1 = 200;
 8000886:	4b37      	ldr	r3, [pc, #220]	; (8000964 <fsm_traffic_light_run+0x2d8>)
 8000888:	22c8      	movs	r2, #200	; 0xc8
 800088a:	601a      	str	r2, [r3, #0]
			status = MOD_RED;
 800088c:	4b2f      	ldr	r3, [pc, #188]	; (800094c <fsm_traffic_light_run+0x2c0>)
 800088e:	2206      	movs	r2, #6
 8000890:	601a      	str	r2, [r3, #0]
			clearAllClock();
 8000892:	f7ff fee7 	bl	8000664 <clearAllClock>
			setTimer(0, 500);
 8000896:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fc82 	bl	80011a4 <setTimer>
		}
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
		break;
 80008a0:	e16a      	b.n	8000b78 <fsm_traffic_light_run+0x4ec>
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 80008a2:	2001      	movs	r0, #1
 80008a4:	f7ff fc52 	bl	800014c <isButtonPressed>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	f000 8164 	beq.w	8000b78 <fsm_traffic_light_run+0x4ec>
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fc4b 	bl	800014c <isButtonPressed>
		break;
 80008b6:	e15f      	b.n	8000b78 <fsm_traffic_light_run+0x4ec>
	case YELLOW_RED:
		value = timer_counter[0];
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <fsm_traffic_light_run+0x2c8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a28      	ldr	r2, [pc, #160]	; (8000960 <fsm_traffic_light_run+0x2d4>)
 80008be:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <fsm_traffic_light_run+0x2c8>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a27      	ldr	r2, [pc, #156]	; (8000964 <fsm_traffic_light_run+0x2d8>)
 80008c6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA, LED_RED_Pin | LED_GREEN_Pin | LED_YELLOW_OP_Pin | LED_GREEN_OP_Pin, 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	21b8      	movs	r1, #184	; 0xb8
 80008cc:	4826      	ldr	r0, [pc, #152]	; (8000968 <fsm_traffic_light_run+0x2dc>)
 80008ce:	f001 f888 	bl	80019e2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW_Pin | LED_RED_OP_Pin, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2144      	movs	r1, #68	; 0x44
 80008d6:	4824      	ldr	r0, [pc, #144]	; (8000968 <fsm_traffic_light_run+0x2dc>)
 80008d8:	f001 f883 	bl	80019e2 <HAL_GPIO_WritePin>
		if (isTimerExpired(0) == 1) {
 80008dc:	2000      	movs	r0, #0
 80008de:	f000 fc81 	bl	80011e4 <isTimerExpired>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d108      	bne.n	80008fa <fsm_traffic_light_run+0x26e>
			status = RED_GREEN;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <fsm_traffic_light_run+0x2c0>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <fsm_traffic_light_run+0x2c4>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 fc55 	bl	80011a4 <setTimer>
		}
		if (isButtonPressed(0) == 1) {
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff fc26 	bl	800014c <isButtonPressed>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d117      	bne.n	8000936 <fsm_traffic_light_run+0x2aa>
			value = TIME_RED / 10;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <fsm_traffic_light_run+0x2e0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <fsm_traffic_light_run+0x2d0>)
 800090c:	fb82 1203 	smull	r1, r2, r2, r3
 8000910:	1092      	asrs	r2, r2, #2
 8000912:	17db      	asrs	r3, r3, #31
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <fsm_traffic_light_run+0x2d4>)
 8000918:	6013      	str	r3, [r2, #0]
			value1 = 200;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <fsm_traffic_light_run+0x2d8>)
 800091c:	22c8      	movs	r2, #200	; 0xc8
 800091e:	601a      	str	r2, [r3, #0]
			status = MOD_RED;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <fsm_traffic_light_run+0x2c0>)
 8000922:	2206      	movs	r2, #6
 8000924:	601a      	str	r2, [r3, #0]
			clearAllClock();
 8000926:	f7ff fe9d 	bl	8000664 <clearAllClock>
			setTimer(0, 500);
 800092a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fc38 	bl	80011a4 <setTimer>
		}
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
		break;
 8000934:	e122      	b.n	8000b7c <fsm_traffic_light_run+0x4f0>
		else if (isButtonPressed(1) == 1 || isButtonPressed(2) == 1) {}
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff fc08 	bl	800014c <isButtonPressed>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	f000 811c 	beq.w	8000b7c <fsm_traffic_light_run+0x4f0>
 8000944:	2002      	movs	r0, #2
 8000946:	f7ff fc01 	bl	800014c <isButtonPressed>
		break;
 800094a:	e117      	b.n	8000b7c <fsm_traffic_light_run+0x4f0>
 800094c:	20000080 	.word	0x20000080
 8000950:	20000044 	.word	0x20000044
 8000954:	20000458 	.word	0x20000458
 8000958:	20000040 	.word	0x20000040
 800095c:	66666667 	.word	0x66666667
 8000960:	20000084 	.word	0x20000084
 8000964:	20000088 	.word	0x20000088
 8000968:	40010800 	.word	0x40010800
 800096c:	2000003c 	.word	0x2000003c
	case MOD_RED:
		if (isTimerExpired(0) == 1) {
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fc37 	bl	80011e4 <isTimerExpired>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d108      	bne.n	800098e <fsm_traffic_light_run+0x302>
			HAL_GPIO_TogglePin(GPIOA, LED_RED_Pin | LED_RED_OP_Pin);
 800097c:	2124      	movs	r1, #36	; 0x24
 800097e:	4884      	ldr	r0, [pc, #528]	; (8000b90 <fsm_traffic_light_run+0x504>)
 8000980:	f001 f847 	bl	8001a12 <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 8000984:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000988:	2000      	movs	r0, #0
 800098a:	f000 fc0b 	bl	80011a4 <setTimer>
		}
		if (isButtonPressed(1) == 1) {
 800098e:	2001      	movs	r0, #1
 8000990:	f7ff fbdc 	bl	800014c <isButtonPressed>
 8000994:	4603      	mov	r3, r0
 8000996:	2b01      	cmp	r3, #1
 8000998:	d10d      	bne.n	80009b6 <fsm_traffic_light_run+0x32a>
			value = (value >= 9900) ? 100 : value + 100;
 800099a:	4b7e      	ldr	r3, [pc, #504]	; (8000b94 <fsm_traffic_light_run+0x508>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f242 62ab 	movw	r2, #9899	; 0x26ab
 80009a2:	4293      	cmp	r3, r2
 80009a4:	dc03      	bgt.n	80009ae <fsm_traffic_light_run+0x322>
 80009a6:	4b7b      	ldr	r3, [pc, #492]	; (8000b94 <fsm_traffic_light_run+0x508>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3364      	adds	r3, #100	; 0x64
 80009ac:	e000      	b.n	80009b0 <fsm_traffic_light_run+0x324>
 80009ae:	2364      	movs	r3, #100	; 0x64
 80009b0:	4a78      	ldr	r2, [pc, #480]	; (8000b94 <fsm_traffic_light_run+0x508>)
 80009b2:	6013      	str	r3, [r2, #0]
			clearAllClock();
			value = TIME_YELLOW / 10;
			value1 = 300;
			setTimer(0, 500);
		}
		break;
 80009b4:	e0e4      	b.n	8000b80 <fsm_traffic_light_run+0x4f4>
		else if (isButtonPressed(2) == 1) {
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff fbc8 	bl	800014c <isButtonPressed>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d104      	bne.n	80009cc <fsm_traffic_light_run+0x340>
			TIME_RED_tmp = value;
 80009c2:	4b74      	ldr	r3, [pc, #464]	; (8000b94 <fsm_traffic_light_run+0x508>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a74      	ldr	r2, [pc, #464]	; (8000b98 <fsm_traffic_light_run+0x50c>)
 80009c8:	6013      	str	r3, [r2, #0]
		break;
 80009ca:	e0d9      	b.n	8000b80 <fsm_traffic_light_run+0x4f4>
		else if (isButtonPressed(0) == 1) {
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff fbbd 	bl	800014c <isButtonPressed>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	f040 80d3 	bne.w	8000b80 <fsm_traffic_light_run+0x4f4>
			status = MOD_AMBER;
 80009da:	4b70      	ldr	r3, [pc, #448]	; (8000b9c <fsm_traffic_light_run+0x510>)
 80009dc:	2207      	movs	r2, #7
 80009de:	601a      	str	r2, [r3, #0]
			clearAllClock();
 80009e0:	f7ff fe40 	bl	8000664 <clearAllClock>
			value = TIME_YELLOW / 10;
 80009e4:	4b6e      	ldr	r3, [pc, #440]	; (8000ba0 <fsm_traffic_light_run+0x514>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a6e      	ldr	r2, [pc, #440]	; (8000ba4 <fsm_traffic_light_run+0x518>)
 80009ea:	fb82 1203 	smull	r1, r2, r2, r3
 80009ee:	1092      	asrs	r2, r2, #2
 80009f0:	17db      	asrs	r3, r3, #31
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	4a67      	ldr	r2, [pc, #412]	; (8000b94 <fsm_traffic_light_run+0x508>)
 80009f6:	6013      	str	r3, [r2, #0]
			value1 = 300;
 80009f8:	4b6b      	ldr	r3, [pc, #428]	; (8000ba8 <fsm_traffic_light_run+0x51c>)
 80009fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009fe:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 8000a00:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fbcd 	bl	80011a4 <setTimer>
		break;
 8000a0a:	e0b9      	b.n	8000b80 <fsm_traffic_light_run+0x4f4>
	case MOD_AMBER:
		if (isTimerExpired(0) == 1) {
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 fbe9 	bl	80011e4 <isTimerExpired>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d108      	bne.n	8000a2a <fsm_traffic_light_run+0x39e>
			HAL_GPIO_TogglePin(GPIOA, LED_YELLOW_Pin | LED_YELLOW_OP_Pin);
 8000a18:	2148      	movs	r1, #72	; 0x48
 8000a1a:	485d      	ldr	r0, [pc, #372]	; (8000b90 <fsm_traffic_light_run+0x504>)
 8000a1c:	f000 fff9 	bl	8001a12 <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 8000a20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 fbbd 	bl	80011a4 <setTimer>
		}

		if (isButtonPressed(1) == 1) {
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff fb8e 	bl	800014c <isButtonPressed>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d10d      	bne.n	8000a52 <fsm_traffic_light_run+0x3c6>
			value = (value >= 9900) ? 100 : value + 100;
 8000a36:	4b57      	ldr	r3, [pc, #348]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	dc03      	bgt.n	8000a4a <fsm_traffic_light_run+0x3be>
 8000a42:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3364      	adds	r3, #100	; 0x64
 8000a48:	e000      	b.n	8000a4c <fsm_traffic_light_run+0x3c0>
 8000a4a:	2364      	movs	r3, #100	; 0x64
 8000a4c:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000a4e:	6013      	str	r3, [r2, #0]
			clearAllClock();
			value = TIME_GREEN / 10;
			value1 = 400;
			setTimer(0, 500);
		}
		break;
 8000a50:	e098      	b.n	8000b84 <fsm_traffic_light_run+0x4f8>
		else if (isButtonPressed(2) == 1) {
 8000a52:	2002      	movs	r0, #2
 8000a54:	f7ff fb7a 	bl	800014c <isButtonPressed>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d104      	bne.n	8000a68 <fsm_traffic_light_run+0x3dc>
			TIME_AMBER_tmp = value;
 8000a5e:	4b4d      	ldr	r3, [pc, #308]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a52      	ldr	r2, [pc, #328]	; (8000bac <fsm_traffic_light_run+0x520>)
 8000a64:	6013      	str	r3, [r2, #0]
		break;
 8000a66:	e08d      	b.n	8000b84 <fsm_traffic_light_run+0x4f8>
		else if (isButtonPressed(0) == 1) {
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fb6f 	bl	800014c <isButtonPressed>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	f040 8087 	bne.w	8000b84 <fsm_traffic_light_run+0x4f8>
			status = MOD_GREEN;
 8000a76:	4b49      	ldr	r3, [pc, #292]	; (8000b9c <fsm_traffic_light_run+0x510>)
 8000a78:	2208      	movs	r2, #8
 8000a7a:	601a      	str	r2, [r3, #0]
			clearAllClock();
 8000a7c:	f7ff fdf2 	bl	8000664 <clearAllClock>
			value = TIME_GREEN / 10;
 8000a80:	4b4b      	ldr	r3, [pc, #300]	; (8000bb0 <fsm_traffic_light_run+0x524>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a47      	ldr	r2, [pc, #284]	; (8000ba4 <fsm_traffic_light_run+0x518>)
 8000a86:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8a:	1092      	asrs	r2, r2, #2
 8000a8c:	17db      	asrs	r3, r3, #31
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	4a40      	ldr	r2, [pc, #256]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000a92:	6013      	str	r3, [r2, #0]
			value1 = 400;
 8000a94:	4b44      	ldr	r3, [pc, #272]	; (8000ba8 <fsm_traffic_light_run+0x51c>)
 8000a96:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000a9a:	601a      	str	r2, [r3, #0]
			setTimer(0, 500);
 8000a9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fb7f 	bl	80011a4 <setTimer>
		break;
 8000aa6:	e06d      	b.n	8000b84 <fsm_traffic_light_run+0x4f8>
	case MOD_GREEN:
		if (isTimerExpired(0) == 1) {
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 fb9b 	bl	80011e4 <isTimerExpired>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d108      	bne.n	8000ac6 <fsm_traffic_light_run+0x43a>
			HAL_GPIO_TogglePin(GPIOA, LED_GREEN_Pin | LED_GREEN_OP_Pin);
 8000ab4:	2190      	movs	r1, #144	; 0x90
 8000ab6:	4836      	ldr	r0, [pc, #216]	; (8000b90 <fsm_traffic_light_run+0x504>)
 8000ab8:	f000 ffab 	bl	8001a12 <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 8000abc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 fb6f 	bl	80011a4 <setTimer>
		}

		if (isButtonPressed(1) == 1) {
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f7ff fb40 	bl	800014c <isButtonPressed>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d10d      	bne.n	8000aee <fsm_traffic_light_run+0x462>
			value = (value >= 9900) ? 100 : value + 100;
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f242 62ab 	movw	r2, #9899	; 0x26ab
 8000ada:	4293      	cmp	r3, r2
 8000adc:	dc03      	bgt.n	8000ae6 <fsm_traffic_light_run+0x45a>
 8000ade:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3364      	adds	r3, #100	; 0x64
 8000ae4:	e000      	b.n	8000ae8 <fsm_traffic_light_run+0x45c>
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000aea:	6013      	str	r3, [r2, #0]
		}
		else if (isButtonPressed(0) == 1) {
			status = RED_GREEN;
			setTimer(0, TIME_GREEN);
		}
		break;
 8000aec:	e04c      	b.n	8000b88 <fsm_traffic_light_run+0x4fc>
		else if (isButtonPressed(2) == 1) {
 8000aee:	2002      	movs	r0, #2
 8000af0:	f7ff fb2c 	bl	800014c <isButtonPressed>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d128      	bne.n	8000b4c <fsm_traffic_light_run+0x4c0>
			TIME_GREEN_tmp = value;
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <fsm_traffic_light_run+0x508>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <fsm_traffic_light_run+0x528>)
 8000b00:	6013      	str	r3, [r2, #0]
			if (TIME_GREEN_tmp + TIME_AMBER_tmp == TIME_RED_tmp) {
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <fsm_traffic_light_run+0x528>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b29      	ldr	r3, [pc, #164]	; (8000bac <fsm_traffic_light_run+0x520>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	441a      	add	r2, r3
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <fsm_traffic_light_run+0x50c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d139      	bne.n	8000b88 <fsm_traffic_light_run+0x4fc>
				TIME_GREEN = TIME_GREEN_tmp * 10;
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <fsm_traffic_light_run+0x528>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <fsm_traffic_light_run+0x524>)
 8000b24:	601a      	str	r2, [r3, #0]
				TIME_YELLOW = TIME_AMBER_tmp * 10;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <fsm_traffic_light_run+0x520>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <fsm_traffic_light_run+0x514>)
 8000b36:	601a      	str	r2, [r3, #0]
				TIME_RED = TIME_RED_tmp * 10;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <fsm_traffic_light_run+0x50c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <fsm_traffic_light_run+0x52c>)
 8000b48:	601a      	str	r2, [r3, #0]
		break;
 8000b4a:	e01d      	b.n	8000b88 <fsm_traffic_light_run+0x4fc>
		else if (isButtonPressed(0) == 1) {
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fafd 	bl	800014c <isButtonPressed>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d117      	bne.n	8000b88 <fsm_traffic_light_run+0x4fc>
			status = RED_GREEN;
 8000b58:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <fsm_traffic_light_run+0x510>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	601a      	str	r2, [r3, #0]
			setTimer(0, TIME_GREEN);
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <fsm_traffic_light_run+0x524>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4619      	mov	r1, r3
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 fb1d 	bl	80011a4 <setTimer>
		break;
 8000b6a:	e00d      	b.n	8000b88 <fsm_traffic_light_run+0x4fc>
	default:
		break;
 8000b6c:	bf00      	nop
 8000b6e:	e00c      	b.n	8000b8a <fsm_traffic_light_run+0x4fe>
		break;
 8000b70:	bf00      	nop
 8000b72:	e00a      	b.n	8000b8a <fsm_traffic_light_run+0x4fe>
		break;
 8000b74:	bf00      	nop
 8000b76:	e008      	b.n	8000b8a <fsm_traffic_light_run+0x4fe>
		break;
 8000b78:	bf00      	nop
 8000b7a:	e006      	b.n	8000b8a <fsm_traffic_light_run+0x4fe>
		break;
 8000b7c:	bf00      	nop
 8000b7e:	e004      	b.n	8000b8a <fsm_traffic_light_run+0x4fe>
		break;
 8000b80:	bf00      	nop
 8000b82:	e002      	b.n	8000b8a <fsm_traffic_light_run+0x4fe>
		break;
 8000b84:	bf00      	nop
 8000b86:	e000      	b.n	8000b8a <fsm_traffic_light_run+0x4fe>
		break;
 8000b88:	bf00      	nop
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40010800 	.word	0x40010800
 8000b94:	20000084 	.word	0x20000084
 8000b98:	20000074 	.word	0x20000074
 8000b9c:	20000080 	.word	0x20000080
 8000ba0:	20000040 	.word	0x20000040
 8000ba4:	66666667 	.word	0x66666667
 8000ba8:	20000088 	.word	0x20000088
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	20000044 	.word	0x20000044
 8000bb4:	2000007c 	.word	0x2000007c
 8000bb8:	2000003c 	.word	0x2000003c

08000bbc <task0>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void task0(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	updateClockBuffer();
 8000bc0:	f7ff fd00 	bl	80005c4 <updateClockBuffer>
	fsm_traffic_light_run();
 8000bc4:	f7ff fd62 	bl	800068c <fsm_traffic_light_run>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <task1>:

void task1(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	update7SEG(index_led);
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <task1+0x2c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fcb3 	bl	8000540 <update7SEG>
	++index_led;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <task1+0x2c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <task1+0x2c>)
 8000be2:	6013      	str	r3, [r2, #0]
	if (index_led > 1) {
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <task1+0x2c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	dd02      	ble.n	8000bf2 <task1+0x26>
		index_led = 0;
 8000bec:	4b02      	ldr	r3, [pc, #8]	; (8000bf8 <task1+0x2c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000070 	.word	0x20000070

08000bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c00:	f000 fbee 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c04:	f000 f838 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000c08:	f000 f872 	bl	8000cf0 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000c0c:	f000 f8bc 	bl	8000d88 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c10:	4811      	ldr	r0, [pc, #68]	; (8000c58 <main+0x5c>)
 8000c12:	f001 fb43 	bl	800229c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <main+0x60>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]
  value = 10;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <main+0x64>)
 8000c1e:	220a      	movs	r2, #10
 8000c20:	601a      	str	r2, [r3, #0]
  value1 = 10;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <main+0x68>)
 8000c24:	220a      	movs	r2, #10
 8000c26:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(timerRun, 0, 10);
 8000c28:	220a      	movs	r2, #10
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <main+0x6c>)
 8000c2e:	f000 f939 	bl	8000ea4 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 10);
 8000c32:	220a      	movs	r2, #10
 8000c34:	2100      	movs	r1, #0
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <main+0x70>)
 8000c38:	f000 f934 	bl	8000ea4 <SCH_Add_Task>
  SCH_Add_Task(task0, 0, 10);
 8000c3c:	220a      	movs	r2, #10
 8000c3e:	2100      	movs	r1, #0
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <main+0x74>)
 8000c42:	f000 f92f 	bl	8000ea4 <SCH_Add_Task>
  SCH_Add_Task(task1, 10, 100);
 8000c46:	2264      	movs	r2, #100	; 0x64
 8000c48:	210a      	movs	r1, #10
 8000c4a:	480a      	ldr	r0, [pc, #40]	; (8000c74 <main+0x78>)
 8000c4c:	f000 f92a 	bl	8000ea4 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000c50:	f000 fa58 	bl	8001104 <SCH_Dispatch_Tasks>
 8000c54:	e7fc      	b.n	8000c50 <main+0x54>
 8000c56:	bf00      	nop
 8000c58:	200000f0 	.word	0x200000f0
 8000c5c:	20000080 	.word	0x20000080
 8000c60:	20000084 	.word	0x20000084
 8000c64:	20000088 	.word	0x20000088
 8000c68:	08001219 	.word	0x08001219
 8000c6c:	08000181 	.word	0x08000181
 8000c70:	08000bbd 	.word	0x08000bbd
 8000c74:	08000bcd 	.word	0x08000bcd

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b090      	sub	sp, #64	; 0x40
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0318 	add.w	r3, r7, #24
 8000c82:	2228      	movs	r2, #40	; 0x28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 feb8 	bl	80029fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fec8 	bl	8001a44 <HAL_RCC_OscConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cba:	f000 f8ed 	bl	8000e98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f934 	bl	8001f44 <HAL_RCC_ClockConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 f8d9 	bl	8000e98 <Error_Handler>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	3740      	adds	r7, #64	; 0x40
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d16:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d24:	2209      	movs	r2, #9
 8000d26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d34:	4813      	ldr	r0, [pc, #76]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d36:	f001 fa61 	bl	80021fc <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d40:	f000 f8aa 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d52:	f001 fbdf 	bl	8002514 <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d5c:	f000 f89c 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_TIM2_Init+0x94>)
 8000d6e:	f001 fdb7 	bl	80028e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d78:	f000 f88e 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000f0 	.word	0x200000f0

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 0310 	add.w	r3, r7, #16
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9c:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0310 	and.w	r3, r3, #16
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <MX_GPIO_Init+0xec>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_OP_Pin|LED_YELLOW_OP_Pin|LED_GREEN_OP_Pin|LED_RED_Pin
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8000dea:	4823      	ldr	r0, [pc, #140]	; (8000e78 <MX_GPIO_Init+0xf0>)
 8000dec:	f000 fdf9 	bl	80019e2 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d2_Pin
 8000df0:	2200      	movs	r2, #0
 8000df2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000df6:	4821      	ldr	r0, [pc, #132]	; (8000e7c <MX_GPIO_Init+0xf4>)
 8000df8:	f000 fdf3 	bl	80019e2 <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : MODULE_Pin */
  GPIO_InitStruct.Pin = MODULE_Pin;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODULE_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481b      	ldr	r0, [pc, #108]	; (8000e80 <MX_GPIO_Init+0xf8>)
 8000e12:	f000 fc55 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_OP_Pin LED_YELLOW_OP_Pin LED_GREEN_OP_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = LED_RED_OP_Pin|LED_YELLOW_OP_Pin|LED_GREEN_OP_Pin|LED_RED_Pin
 8000e16:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8000e1a:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4812      	ldr	r0, [pc, #72]	; (8000e78 <MX_GPIO_Init+0xf0>)
 8000e30:	f000 fc46 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d_Pin
                           e_Pin f_Pin g_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d2_Pin
 8000e34:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000e38:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <MX_GPIO_Init+0xf4>)
 8000e4e:	f000 fc37 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TIME_Pin VALUE_Pin */
  GPIO_InitStruct.Pin = TIME_Pin|VALUE_Pin;
 8000e52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_GPIO_Init+0xf4>)
 8000e68:	f000 fc2a 	bl	80016c0 <HAL_GPIO_Init>

}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	40010c00 	.word	0x40010c00
 8000e80:	40011000 	.word	0x40011000

08000e84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000e8c:	f000 f8da 	bl	8001044 <SCH_Update>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>
	...

08000ea4 <SCH_Add_Task>:

void SCH_Init(void) {
	current_index_task = 0;
}

void SCH_Add_Task( void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	if (current_index_task < SCH_MAX_TASKS) {
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b27      	cmp	r3, #39	; 0x27
 8000eb6:	d84a      	bhi.n	8000f4e <SCH_Add_Task+0xaa>
		SCH_tasks_G[current_index_task].pTask = pFunction;
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <SCH_Add_Task+0xb8>)
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Delay = DELAY / SCH_TICK;
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <SCH_Add_Task+0xbc>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	491f      	ldr	r1, [pc, #124]	; (8000f5c <SCH_Add_Task+0xb8>)
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4403      	add	r3, r0
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	3304      	adds	r3, #4
 8000eec:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].Period = PERIOD / SCH_TICK;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <SCH_Add_Task+0xbc>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	4917      	ldr	r1, [pc, #92]	; (8000f5c <SCH_Add_Task+0xb8>)
 8000f00:	4603      	mov	r3, r0
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4403      	add	r3, r0
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[current_index_task].RunMe = 0;
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	4619      	mov	r1, r3
 8000f14:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <SCH_Add_Task+0xb8>)
 8000f16:	460b      	mov	r3, r1
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	330c      	adds	r3, #12
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]

		SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4610      	mov	r0, r2
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SCH_Add_Task+0xb8>)
 8000f34:	460b      	mov	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3310      	adds	r3, #16
 8000f40:	6018      	str	r0, [r3, #0]

		++current_index_task;
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <SCH_Add_Task+0xb4>)
 8000f4c:	701a      	strb	r2, [r3, #0]
	}
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	2000008c 	.word	0x2000008c
 8000f5c:	20000138 	.word	0x20000138
 8000f60:	cccccccd 	.word	0xcccccccd

08000f64 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t ID) {
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	if (current_index_task > ID) {
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <SCH_Delete_Task+0xd8>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d25c      	bcs.n	8001032 <SCH_Delete_Task+0xce>
		for (int i = ID; i < current_index_task - 1; ++i){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	e04d      	b.n	800101a <SCH_Delete_Task+0xb6>
			SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	492f      	ldr	r1, [pc, #188]	; (8001040 <SCH_Delete_Task+0xdc>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	482b      	ldr	r0, [pc, #172]	; (8001040 <SCH_Delete_Task+0xdc>)
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4403      	add	r3, r0
 8000f9e:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Delay = SCH_tasks_G[i + 1].Delay;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	4926      	ldr	r1, [pc, #152]	; (8001040 <SCH_Delete_Task+0xdc>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	440b      	add	r3, r1
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	4822      	ldr	r0, [pc, #136]	; (8001040 <SCH_Delete_Task+0xdc>)
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4403      	add	r3, r0
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].Period = SCH_tasks_G[i + 1].Period;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1c5a      	adds	r2, r3, #1
 8000fca:	491d      	ldr	r1, [pc, #116]	; (8001040 <SCH_Delete_Task+0xdc>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	6819      	ldr	r1, [r3, #0]
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <SCH_Delete_Task+0xdc>)
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4403      	add	r3, r0
 8000fe8:	3308      	adds	r3, #8
 8000fea:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe = SCH_tasks_G[i + 1].RunMe;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	4913      	ldr	r1, [pc, #76]	; (8001040 <SCH_Delete_Task+0xdc>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	7818      	ldrb	r0, [r3, #0]
 8001000:	490f      	ldr	r1, [pc, #60]	; (8001040 <SCH_Delete_Task+0xdc>)
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	330c      	adds	r3, #12
 8001010:	4602      	mov	r2, r0
 8001012:	701a      	strb	r2, [r3, #0]
		for (int i = ID; i < current_index_task - 1; ++i){
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <SCH_Delete_Task+0xd8>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	429a      	cmp	r2, r3
 8001024:	dbab      	blt.n	8000f7e <SCH_Delete_Task+0x1a>
		}
		--current_index_task;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <SCH_Delete_Task+0xd8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b03      	ldr	r3, [pc, #12]	; (800103c <SCH_Delete_Task+0xd8>)
 8001030:	701a      	strb	r2, [r3, #0]
	}
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	2000008c 	.word	0x2000008c
 8001040:	20000138 	.word	0x20000138

08001044 <SCH_Update>:

void SCH_Update(void) {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; ++i) {
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	e048      	b.n	80010e2 <SCH_Update+0x9e>
		if (SCH_tasks_G[i].Delay > 0) {
 8001050:	492a      	ldr	r1, [pc, #168]	; (80010fc <SCH_Update+0xb8>)
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3304      	adds	r3, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d013      	beq.n	800108e <SCH_Update+0x4a>
			--SCH_tasks_G[i].Delay;
 8001066:	4925      	ldr	r1, [pc, #148]	; (80010fc <SCH_Update+0xb8>)
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3304      	adds	r3, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1e59      	subs	r1, r3, #1
 800107a:	4820      	ldr	r0, [pc, #128]	; (80010fc <SCH_Update+0xb8>)
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4403      	add	r3, r0
 8001088:	3304      	adds	r3, #4
 800108a:	6019      	str	r1, [r3, #0]
 800108c:	e026      	b.n	80010dc <SCH_Update+0x98>
		}
		else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 800108e:	491b      	ldr	r1, [pc, #108]	; (80010fc <SCH_Update+0xb8>)
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	3308      	adds	r3, #8
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	4816      	ldr	r0, [pc, #88]	; (80010fc <SCH_Update+0xb8>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4403      	add	r3, r0
 80010ae:	3304      	adds	r3, #4
 80010b0:	6019      	str	r1, [r3, #0]
			++SCH_tasks_G[i].RunMe;
 80010b2:	4912      	ldr	r1, [pc, #72]	; (80010fc <SCH_Update+0xb8>)
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	330c      	adds	r3, #12
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	3301      	adds	r3, #1
 80010c6:	b2d8      	uxtb	r0, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <SCH_Update+0xb8>)
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	330c      	adds	r3, #12
 80010d8:	4602      	mov	r2, r0
 80010da:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < current_index_task; ++i) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3301      	adds	r3, #1
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <SCH_Update+0xbc>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4293      	cmp	r3, r2
 80010ec:	dbb0      	blt.n	8001050 <SCH_Update+0xc>
		}
	}
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000138 	.word	0x20000138
 8001100:	2000008c 	.word	0x2000008c

08001104 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	for (int i = 0; i < current_index_task; ++i) {
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	e03a      	b.n	8001186 <SCH_Dispatch_Tasks+0x82>
		if (SCH_tasks_G[i].RunMe > 0) {
 8001110:	4922      	ldr	r1, [pc, #136]	; (800119c <SCH_Dispatch_Tasks+0x98>)
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	330c      	adds	r3, #12
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d02c      	beq.n	8001180 <SCH_Dispatch_Tasks+0x7c>
			--SCH_tasks_G[i].RunMe;
 8001126:	491d      	ldr	r1, [pc, #116]	; (800119c <SCH_Dispatch_Tasks+0x98>)
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	330c      	adds	r3, #12
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	b2d8      	uxtb	r0, r3
 800113c:	4917      	ldr	r1, [pc, #92]	; (800119c <SCH_Dispatch_Tasks+0x98>)
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	330c      	adds	r3, #12
 800114c:	4602      	mov	r2, r0
 800114e:	701a      	strb	r2, [r3, #0]
			(*SCH_tasks_G[i].pTask)();
 8001150:	4912      	ldr	r1, [pc, #72]	; (800119c <SCH_Dispatch_Tasks+0x98>)
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4798      	blx	r3
			if (SCH_tasks_G[i].Period == 0) {
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <SCH_Dispatch_Tasks+0x98>)
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	3308      	adds	r3, #8
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <SCH_Dispatch_Tasks+0x7c>
				SCH_Delete_Task(i);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fef2 	bl	8000f64 <SCH_Delete_Task>
	for (int i = 0; i < current_index_task; ++i) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SCH_Dispatch_Tasks+0x9c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4293      	cmp	r3, r2
 8001190:	dbbe      	blt.n	8001110 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000138 	.word	0x20000138
 80011a0:	2000008c 	.word	0x2000008c

080011a4 <setTimer>:
#include "software_timer.h"

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int value) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	timer_counter[index] = value / TIMER_TICK;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <setTimer+0x34>)
 80011b2:	fb82 1203 	smull	r1, r2, r2, r3
 80011b6:	1092      	asrs	r2, r2, #2
 80011b8:	17db      	asrs	r3, r3, #31
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <setTimer+0x38>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <setTimer+0x3c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2100      	movs	r1, #0
 80011ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	66666667 	.word	0x66666667
 80011dc:	20000458 	.word	0x20000458
 80011e0:	20000484 	.word	0x20000484

080011e4 <isTimerExpired>:

int isTimerExpired(int index) {
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <isTimerExpired+0x30>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <isTimerExpired+0x30>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2100      	movs	r1, #0
 80011fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <isTimerExpired+0x24>
	}
	return 0;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000484 	.word	0x20000484

08001218 <timerRun>:

void timerRun() {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	e01c      	b.n	800125e <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8001224:	4a12      	ldr	r2, [pc, #72]	; (8001270 <timerRun+0x58>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd13      	ble.n	8001258 <timerRun+0x40>
			--timer_counter[i];
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <timerRun+0x58>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	490d      	ldr	r1, [pc, #52]	; (8001270 <timerRun+0x58>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <timerRun+0x58>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	2b00      	cmp	r3, #0
 800124c:	dc04      	bgt.n	8001258 <timerRun+0x40>
				timer_flag[i] = 1;
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <timerRun+0x5c>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2101      	movs	r1, #1
 8001254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3301      	adds	r3, #1
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0a      	cmp	r3, #10
 8001262:	dddf      	ble.n	8001224 <timerRun+0xc>
			}
		}
	}
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000458 	.word	0x20000458
 8001274:	20000484 	.word	0x20000484

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_MspInit+0x5c>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <HAL_MspInit+0x5c>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_MspInit+0x5c>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_MspInit+0x5c>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_MspInit+0x5c>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_MspInit+0x5c>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <HAL_MspInit+0x60>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_MspInit+0x60>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ec:	d113      	bne.n	8001316 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ee:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <HAL_TIM_Base_MspInit+0x44>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_TIM_Base_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_TIM_Base_MspInit+0x44>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	201c      	movs	r0, #28
 800130c:	f000 f9a1 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001310:	201c      	movs	r0, #28
 8001312:	f000 f9ba 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <NMI_Handler+0x4>

0800132a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <MemManage_Handler+0x4>

08001336 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <UsageFault_Handler+0x4>

08001342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr

0800135a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136a:	f000 f87f 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <TIM2_IRQHandler+0x10>)
 800137a:	f000 ffdb 	bl	8002334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200000f0 	.word	0x200000f0

08001388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001394:	f7ff fff8 	bl	8001388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480b      	ldr	r0, [pc, #44]	; (80013c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800139a:	490c      	ldr	r1, [pc, #48]	; (80013cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b0:	4c09      	ldr	r4, [pc, #36]	; (80013d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f001 faf9 	bl	80029b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c2:	f7ff fc1b 	bl	8000bfc <main>
  bx lr
 80013c6:	4770      	bx	lr
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80013d0:	08002a50 	.word	0x08002a50
  ldr r2, =_sbss
 80013d4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80013d8:	200004b4 	.word	0x200004b4

080013dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_2_IRQHandler>
	...

080013e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_Init+0x28>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_Init+0x28>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 f923 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f808 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fc:	f7ff ff3c 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40022000 	.word	0x40022000

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f93b 	bl	80016a6 <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f903 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000048 	.word	0x20000048
 8001464:	20000050 	.word	0x20000050
 8001468:	2000004c 	.word	0x2000004c

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_IncTick+0x1c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x20>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a03      	ldr	r2, [pc, #12]	; (800148c <HAL_IncTick+0x20>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000050 	.word	0x20000050
 800148c:	200004b0 	.word	0x200004b0

08001490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b02      	ldr	r3, [pc, #8]	; (80014a0 <HAL_GetTick+0x10>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	200004b0 	.word	0x200004b0

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4906      	ldr	r1, [pc, #24]	; (800153c <__NVIC_EnableIRQ+0x34>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	; 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff90 	bl	8001540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff2d 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff42 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff90 	bl	8001594 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5f 	bl	8001540 <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff35 	bl	8001508 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa2 	bl	80015f8 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e148      	b.n	8001966 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8137 	bne.w	8001960 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4aa3      	ldr	r2, [pc, #652]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4aa1      	ldr	r2, [pc, #644]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4aa1      	ldr	r2, [pc, #644]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a9f      	ldr	r2, [pc, #636]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a9f      	ldr	r2, [pc, #636]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a9d      	ldr	r2, [pc, #628]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a9d      	ldr	r2, [pc, #628]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a9b      	ldr	r2, [pc, #620]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a9b      	ldr	r2, [pc, #620]	; (8001994 <HAL_GPIO_Init+0x2d4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a99      	ldr	r2, [pc, #612]	; (8001994 <HAL_GPIO_Init+0x2d4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a82      	ldr	r2, [pc, #520]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8090 	beq.w	8001960 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_GPIO_Init+0x2dc>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_GPIO_Init+0x2dc>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_GPIO_Init+0x2dc>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1e0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1dc>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a47      	ldr	r2, [pc, #284]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1d8>
 8001894:	2302      	movs	r3, #2
 8001896:	e004      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 8001898:	2303      	movs	r3, #3
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 80018a0:	2300      	movs	r3, #0
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b2:	493b      	ldr	r1, [pc, #236]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4933      	ldr	r1, [pc, #204]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	492d      	ldr	r1, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	43db      	mvns	r3, r3
 800190a:	4929      	ldr	r1, [pc, #164]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800190c:	4013      	ands	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4923      	ldr	r1, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	491f      	ldr	r1, [pc, #124]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001934:	4013      	ands	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4919      	ldr	r1, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4915      	ldr	r1, [pc, #84]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800195c:	4013      	ands	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	3301      	adds	r3, #1
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f aeaf 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	372c      	adds	r7, #44	; 0x2c
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	10320000 	.word	0x10320000
 8001988:	10310000 	.word	0x10310000
 800198c:	10220000 	.word	0x10220000
 8001990:	10210000 	.word	0x10210000
 8001994:	10120000 	.word	0x10120000
 8001998:	10110000 	.word	0x10110000
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	887b      	ldrh	r3, [r7, #2]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	e001      	b.n	80019d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	807b      	strh	r3, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f2:	787b      	ldrb	r3, [r7, #1]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f8:	887a      	ldrh	r2, [r7, #2]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019fe:	e003      	b.n	8001a08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	041a      	lsls	r2, r3, #16
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	611a      	str	r2, [r3, #16]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a24:	887a      	ldrh	r2, [r7, #2]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	041a      	lsls	r2, r3, #16
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	400b      	ands	r3, r1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e26c      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a64:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d00c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a70:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d112      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
 8001a7c:	4b8c      	ldr	r3, [pc, #560]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x12c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d168      	bne.n	8001b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e246      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x76>
 8001aac:	4b80      	ldr	r3, [pc, #512]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7f      	ldr	r2, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e02e      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b78      	ldr	r3, [pc, #480]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a77      	ldr	r2, [pc, #476]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbc>
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a71      	ldr	r2, [pc, #452]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001b00:	4b6b      	ldr	r3, [pc, #428]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6a      	ldr	r2, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a67      	ldr	r2, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fcb6 	bl	8001490 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff fcb2 	bl	8001490 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1fa      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe4>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fca2 	bl	8001490 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff fc9e 	bl	8001490 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1e6      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x10c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1ba      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4939      	ldr	r1, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff fc57 	bl	8001490 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff fc53 	bl	8001490 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e19b      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fc36 	bl	8001490 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fc32 	bl	8001490 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e17a      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03a      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7ff fc16 	bl	8001490 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff fc12 	bl	8001490 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e15a      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 fa9a 	bl	80021c0 <RCC_Delay>
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff fbfc 	bl	8001490 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fbf8 	bl	8001490 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e140      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	42420000 	.word	0x42420000
 8001cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b9e      	ldr	r3, [pc, #632]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e9      	bne.n	8001c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a6 	beq.w	8001e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b97      	ldr	r3, [pc, #604]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b94      	ldr	r3, [pc, #592]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a93      	ldr	r2, [pc, #588]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b91      	ldr	r3, [pc, #580]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a8a      	ldr	r2, [pc, #552]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fbb9 	bl	8001490 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff fbb5 	bl	8001490 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	; 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0fd      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x312>
 8001d48:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a7a      	ldr	r2, [pc, #488]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e02d      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d5e:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a75      	ldr	r2, [pc, #468]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b73      	ldr	r3, [pc, #460]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a72      	ldr	r2, [pc, #456]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x356>
 8001d80:	4b6d      	ldr	r3, [pc, #436]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a6c      	ldr	r2, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a69      	ldr	r2, [pc, #420]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	4b67      	ldr	r3, [pc, #412]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a66      	ldr	r2, [pc, #408]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a63      	ldr	r2, [pc, #396]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fb69 	bl	8001490 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff fb65 	bl	8001490 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0ab      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fb53 	bl	8001490 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff fb4f 	bl	8001490 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e095      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8081 	beq.w	8001f2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d061      	beq.n	8001efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d146      	bne.n	8001ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff fb23 	bl	8001490 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff fb1f 	bl	8001490 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e067      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	492d      	ldr	r1, [pc, #180]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a19      	ldr	r1, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	4927      	ldr	r1, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff faf3 	bl	8001490 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff faef 	bl	8001490 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e037      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x46a>
 8001ecc:	e02f      	b.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fadc 	bl	8001490 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff fad8 	bl	8001490 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e020      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x498>
 8001efa:	e018      	b.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e013      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	42420060 	.word	0x42420060

08001f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0d0      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b67      	ldr	r3, [pc, #412]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4965      	ldr	r1, [pc, #404]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001faa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	494d      	ldr	r1, [pc, #308]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d040      	beq.n	8002064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d115      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e07f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e073      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e06b      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4936      	ldr	r1, [pc, #216]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7ff fa2c 	bl	8001490 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7ff fa28 	bl	8001490 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e053      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d210      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4922      	ldr	r1, [pc, #136]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e032      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490e      	ldr	r1, [pc, #56]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d2:	f000 f821 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490a      	ldr	r1, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1cc>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff f98a 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	08002a24 	.word	0x08002a24
 8002110:	20000048 	.word	0x20000048
 8002114:	2000004c 	.word	0x2000004c

08002118 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d002      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x30>
 8002142:	2b08      	cmp	r3, #8
 8002144:	d003      	beq.n	800214e <HAL_RCC_GetSysClockFreq+0x36>
 8002146:	e027      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800214a:	613b      	str	r3, [r7, #16]
      break;
 800214c:	e027      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d010      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0c5b      	lsrs	r3, r3, #17
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a0d      	ldr	r2, [pc, #52]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800217a:	fb02 f203 	mul.w	r2, r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e004      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	613b      	str	r3, [r7, #16]
      break;
 8002196:	e002      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800219a:	613b      	str	r3, [r7, #16]
      break;
 800219c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219e:	693b      	ldr	r3, [r7, #16]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	08002a34 	.word	0x08002a34
 80021b8:	08002a44 	.word	0x08002a44
 80021bc:	003d0900 	.word	0x003d0900

080021c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <RCC_Delay+0x34>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <RCC_Delay+0x38>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0a5b      	lsrs	r3, r3, #9
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021dc:	bf00      	nop
  }
  while (Delay --);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	60fa      	str	r2, [r7, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f9      	bne.n	80021dc <RCC_Delay+0x1c>
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	20000048 	.word	0x20000048
 80021f8:	10624dd3 	.word	0x10624dd3

080021fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e041      	b.n	8002292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff f85a 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f000 fa56 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e035      	b.n	8002320 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_TIM_Base_Start_IT+0x90>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d009      	beq.n	80022ea <HAL_TIM_Base_Start_IT+0x4e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d004      	beq.n	80022ea <HAL_TIM_Base_Start_IT+0x4e>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a12      	ldr	r2, [pc, #72]	; (8002330 <HAL_TIM_Base_Start_IT+0x94>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d010      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230c:	e007      	b.n	800231e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40000400 	.word	0x40000400

08002334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d020      	beq.n	8002398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01b      	beq.n	8002398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0202 	mvn.w	r2, #2
 8002368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f998 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f98b 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f99a 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d020      	beq.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01b      	beq.n	80023e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0204 	mvn.w	r2, #4
 80023b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f972 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 80023d0:	e005      	b.n	80023de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f965 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f974 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d020      	beq.n	8002430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0208 	mvn.w	r2, #8
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2204      	movs	r2, #4
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f94c 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f93f 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f94e 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d020      	beq.n	800247c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01b      	beq.n	800247c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0210 	mvn.w	r2, #16
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2208      	movs	r2, #8
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f926 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f919 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f928 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00c      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d007      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0201 	mvn.w	r2, #1
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fcf2 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 fa6f 	bl	80029a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00c      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f8f8 	bl	80026d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00c      	beq.n	800250c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d007      	beq.n	800250c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0220 	mvn.w	r2, #32
 8002504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa42 	bl	8002990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIM_ConfigClockSource+0x1c>
 800252c:	2302      	movs	r3, #2
 800252e:	e0b4      	b.n	800269a <HAL_TIM_ConfigClockSource+0x186>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800254e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002556:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002568:	d03e      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0xd4>
 800256a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256e:	f200 8087 	bhi.w	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002576:	f000 8086 	beq.w	8002686 <HAL_TIM_ConfigClockSource+0x172>
 800257a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257e:	d87f      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002580:	2b70      	cmp	r3, #112	; 0x70
 8002582:	d01a      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0xa6>
 8002584:	2b70      	cmp	r3, #112	; 0x70
 8002586:	d87b      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002588:	2b60      	cmp	r3, #96	; 0x60
 800258a:	d050      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x11a>
 800258c:	2b60      	cmp	r3, #96	; 0x60
 800258e:	d877      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002590:	2b50      	cmp	r3, #80	; 0x50
 8002592:	d03c      	beq.n	800260e <HAL_TIM_ConfigClockSource+0xfa>
 8002594:	2b50      	cmp	r3, #80	; 0x50
 8002596:	d873      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d058      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x13a>
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d86f      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b30      	cmp	r3, #48	; 0x30
 80025a2:	d064      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025a4:	2b30      	cmp	r3, #48	; 0x30
 80025a6:	d86b      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b20      	cmp	r3, #32
 80025aa:	d060      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d867      	bhi.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d05c      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d05a      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x15a>
 80025b8:	e062      	b.n	8002680 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6899      	ldr	r1, [r3, #8]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f000 f96a 	bl	80028a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	609a      	str	r2, [r3, #8]
      break;
 80025e6:	e04f      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6899      	ldr	r1, [r3, #8]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f000 f953 	bl	80028a2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800260a:	609a      	str	r2, [r3, #8]
      break;
 800260c:	e03c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	461a      	mov	r2, r3
 800261c:	f000 f8ca 	bl	80027b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2150      	movs	r1, #80	; 0x50
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f921 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 800262c:	e02c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	f000 f8e8 	bl	8002810 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2160      	movs	r1, #96	; 0x60
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f911 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 800264c:	e01c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	461a      	mov	r2, r3
 800265c:	f000 f8aa 	bl	80027b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2140      	movs	r1, #64	; 0x40
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f901 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 800266c:	e00c      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f000 f8f8 	bl	800286e <TIM_ITRx_SetConfig>
      break;
 800267e:	e003      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
      break;
 8002684:	e000      	b.n	8002688 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002686:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a2b      	ldr	r2, [pc, #172]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d007      	beq.n	8002714 <TIM_Base_SetConfig+0x28>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d003      	beq.n	8002714 <TIM_Base_SetConfig+0x28>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <TIM_Base_SetConfig+0xc4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d108      	bne.n	8002726 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a20      	ldr	r2, [pc, #128]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <TIM_Base_SetConfig+0x52>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002734:	d003      	beq.n	800273e <TIM_Base_SetConfig+0x52>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <TIM_Base_SetConfig+0xc4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d108      	bne.n	8002750 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d103      	bne.n	8002784 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f023 0201 	bic.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]
  }
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400

080027b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f023 0201 	bic.w	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f023 030a 	bic.w	r3, r3, #10
 80027f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f023 0210 	bic.w	r2, r3, #16
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800283a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	031b      	lsls	r3, r3, #12
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800284c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	f043 0307 	orr.w	r3, r3, #7
 8002890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b087      	sub	sp, #28
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	60f8      	str	r0, [r7, #12]
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	021a      	lsls	r2, r3, #8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	609a      	str	r2, [r3, #8]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e041      	b.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a14      	ldr	r2, [pc, #80]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d004      	beq.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a10      	ldr	r2, [pc, #64]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10c      	bne.n	800296a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002956:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400

08002990 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <__libc_init_array>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	2600      	movs	r6, #0
 80029b8:	4d0c      	ldr	r5, [pc, #48]	; (80029ec <__libc_init_array+0x38>)
 80029ba:	4c0d      	ldr	r4, [pc, #52]	; (80029f0 <__libc_init_array+0x3c>)
 80029bc:	1b64      	subs	r4, r4, r5
 80029be:	10a4      	asrs	r4, r4, #2
 80029c0:	42a6      	cmp	r6, r4
 80029c2:	d109      	bne.n	80029d8 <__libc_init_array+0x24>
 80029c4:	f000 f822 	bl	8002a0c <_init>
 80029c8:	2600      	movs	r6, #0
 80029ca:	4d0a      	ldr	r5, [pc, #40]	; (80029f4 <__libc_init_array+0x40>)
 80029cc:	4c0a      	ldr	r4, [pc, #40]	; (80029f8 <__libc_init_array+0x44>)
 80029ce:	1b64      	subs	r4, r4, r5
 80029d0:	10a4      	asrs	r4, r4, #2
 80029d2:	42a6      	cmp	r6, r4
 80029d4:	d105      	bne.n	80029e2 <__libc_init_array+0x2e>
 80029d6:	bd70      	pop	{r4, r5, r6, pc}
 80029d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029dc:	4798      	blx	r3
 80029de:	3601      	adds	r6, #1
 80029e0:	e7ee      	b.n	80029c0 <__libc_init_array+0xc>
 80029e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029e6:	4798      	blx	r3
 80029e8:	3601      	adds	r6, #1
 80029ea:	e7f2      	b.n	80029d2 <__libc_init_array+0x1e>
 80029ec:	08002a48 	.word	0x08002a48
 80029f0:	08002a48 	.word	0x08002a48
 80029f4:	08002a48 	.word	0x08002a48
 80029f8:	08002a4c 	.word	0x08002a4c

080029fc <memset>:
 80029fc:	4603      	mov	r3, r0
 80029fe:	4402      	add	r2, r0
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d100      	bne.n	8002a06 <memset+0xa>
 8002a04:	4770      	bx	lr
 8002a06:	f803 1b01 	strb.w	r1, [r3], #1
 8002a0a:	e7f9      	b.n	8002a00 <memset+0x4>

08002a0c <_init>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	bf00      	nop
 8002a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a12:	bc08      	pop	{r3}
 8002a14:	469e      	mov	lr, r3
 8002a16:	4770      	bx	lr

08002a18 <_fini>:
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1a:	bf00      	nop
 8002a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a1e:	bc08      	pop	{r3}
 8002a20:	469e      	mov	lr, r3
 8002a22:	4770      	bx	lr
